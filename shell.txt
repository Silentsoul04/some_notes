什么是shell：
shell是一个命令解释器，它在操作系统最外层，负责直接与用户对话，把用户输出解释给操作系统，并处理各种各样的操作系统的输出结果，输出到屏幕返回给用户。这种对话可以是交互(键盘输入命令)的方式，也可以是非交互(脚本)的方式。
什么是shell脚本：
当linux命令或语句不在命令行下执行（严格说，命令行执行的语句也是shell脚本）而是通过一个程序文件执行时，该程序就被称为shell脚本shell脚本类似于DOS系统下的批处理命令(.bat)


a=192.168.1.2
a=192.168.1.2-$a ===>a=192.168.1.2-192.168.1.2
b='192.168.1.2-$a' ===>b=192.168.1.2-$a 单引号原样输出
c="192.168.1.2-$a"====>c=192.168.1.2-192.168.1.2-192.168.1.2
echo "a=$a"
echo "b=$b"
echo "c=${c}"
定义变量:
单引号:所见即所得，内容原样输出
双引号：双引号的所有内容都输出，如果有命令，要反引。变量，特殊转义字符等，会把变量，命令，字符解析出结果，最后输出最终命令
无引号:把内容输出出来，会将不含有空格的字符串视为一个整体输出，会将命令，变量等解析出来，一般连续字符串，数字，路径等可以不加引号
建议:单纯数字不加引号，脚本中普通字符串用双引号
变量定义多模仿系统的/etc/init.d/functions

特殊变量:
$0:获取当前执行的shell脚本的文件名，如果执行脚本带路径，那么久包括脚本路径
$n:获取当前执行的shell脚本的第n个参数值，n=1..9，当n为0时表示脚本的文件名，n大于0时，用大括号括起来${10}
$* 获取当前shell脚本的所有参数，将所有命令行参数视为单个字符串相当于“$1$2$3”
$# 获取当前shell脚本的所有参数
$@ 这个程序的所有参数"$1" "$2" "$3".. 这是将参数传递给其他程序的最佳方式，因为他会保留内嵌在每个参数里面的空白

$$ 获取当前shell的进程号(pid)
$! 获取上一个指令的pid
$_ 在此之前执行的命令或脚本的最后一个参数
$? 获取执行上一次指令的返回值(0为成功，非零为失败)
	1-125：运行失败
	126 找到命令,但无法执行
	127 未找到命令
	>128 命令被系统强制结束

kill -USR2 $(cat /tmp/a.pid)   ----优雅的杀进程

bash内部的变量命令:(man 随便一个可以查看)
alias, bg, bind, break, builtin, caller, cd, command, compgen, complete, compopt, continue, declare, dirs, disown, echo, enable, eval, exec, exit,export, false, fc, fg, getopts, hash, help, history, jobs, kill, let, local, logout, mapfile, popd, printf, pushd, pwd, read, readonly, return, set,  shift,  shopt,source, suspend, test, times, trap, true, type, typeset, ulimit, umask, unalias, unset, wait
常见的有:echo eval exec export read shift wait exit time expr . 

linux常用的变量计算(())、expr、bc、$[]
(()) -- 非常常用
((……))
示例:
	((a=1+2**3-4%3))
	echo $a ===>8
	echo $((a+=1)) ===>9
	echo $((a++) ===> 9 ++在后面先不计算，++在前先计算再加减
	echo $a ===>10
 	echo $((3>2))===>1
	echo $((3>4))===>0
	bc1.sh:
	echo $(($1$2$3))
	sh bc1.sh 1+2  ===>实际只传给$1了,$2$3为了容错性更好
	sh bc1.sh 1 + 2
let：
	i=1
	i=i+1
	echo $i ==> i+1
	i=1
	let i=i+1
	echo $i ==> 2 
	===============>不用let就不运算
	let和(())都能计算，但(())效率 更高
expr(evaluate express):
	运算符左右都有最少一个空格，称号要转义 \*
	expr 2+1 ===> 2+1
	expr 2 + 1 ===> 3
	与中括号结合:
	expr $[2+3] ===> 5
	expr特殊用法:(判断扩展名)
	vim $(which ssh-copy-id)
		if expr "$1" : ".*\.pub" > /dev/null ; then
	      ID_FILE="$1" 
	    else
	      ID_FILE="$1.pub"
	    fi
    expr判断一个数是否是整数：
    expr 1 + $1 &>/dev/null
	    if [$? -eq 0]
	      then
	        echo "zhengshu"
	    else
	        echo "bushizhengshu"
	    fi

bc计算命令(计算小数是bc特有的):
	echo 1.1+4.1|bc ==> 5.2
	echo "scale=1;5.23/3.13"|bc ===> 1.6  scale==>保留小数位数
	echo "obase=2;10"|bc ====> 1010   10进制10转化为2进制
	echo $(seq -s '+' 10)=$(seq -s "+" 10|bc) ===>1+2+3+4+5+6+7+8+9+10=55
read:
    -p prompt:设置提示信息
    -t timeout:设置超时时间
    示例:
    read -p "please input:" a1
	please input:5
	echo $a ===> 5

分支与循环:
单分支:
	if[ 条件 ]
	  then
	    指令
	fi
	或
	if[ 条件 ];then
	    指令
	fi
多分支:
	if [ 条件 ]
	  then
	    指令
	elif [ 条件 ]
	  then 
	    指令
	    ......
	else
	    指令
	fi

	判断mysql是否在运行:
	#!/bin/sh
	port=$(netstat -lntup|grep 3306|awk -F "[ :]+" '{print $5}')
	if [ ${port:-0} -eq 3306 ]
	  then
	    echo 'msyql is running'
	else
	    echo 'mysql is not running'
	fi


条件测试:
	格式一:test <测试表达式>
	格式二:[<测试表达式>]
	格式三:[[<测试表达式>]]
	格式一和格式二是等价的，格式三是扩展的test命令。
	test -f file && echo 1 || echo 0 ===> 0 测试文件file是否存在,存在输出1,不存在输出0
	[ -f file ]&&echo 1||echo 0
	[[ -f file1 && -f file2 ]] && echo 1 || echo 0 ====> file1和file2同时存在
文件测试常用操作符:
	-f 文件 file 文件存在，且为普通文件为真
	-d 文件 directory  文件存在且为目录则真
	-s 文件 size    文件存在且不为空为真
	-e 文件 exist 文件存在则真(区分-f)
	-r 文件 read  文件存在且可读为真
	-w 文件 write  文件存在且可写则真
	-x 文件 excute... 文件存在且可执行为真
	-L 文件 link    文件存在且为链接文件则真
	f1 -nt f2   newer than   若文件f1比文件f2新则真
	f1 -ot f2   older than   若文件f1比文件f2旧则真
字符串操作常用测试符:
	-z "字符串" zero  若串长度为0 则真
	-n "字符串" not zero 若串长度不为0则真
	"串1"="串2"  串1等于串二则真,可以使用"=="代替"="
	"串1"!="串2" 若串1不等于串2则真，但不能使用!==代替!=
	test="hello"
	[ -n "$test" ] && echo 1 || echo 0
	test="hello"
	hello="hello1"
	[ "$test" = "$hello" ] && echo 1 || echo 0 ===>0
	特别注意:
	1、不管是字符串还是变量都要加双引号
	2、字符串比较字符两端最好都有空格，学习shell多参考系统脚本。不然上面结果会是1
整数二元比较操作符:
	-eq equal 等于
	-ne not equal 不等于 
	-gt greater than 大于
	-lt less than 小于
	-ge grater or equal 大于等于
	-le less os equal  小于等于
	[ 1 -gt 2 ]&&echo 1||echo 0 ===>0
	[ 1 -lt 2 ]&&echo 1||echo 0 ===>1
	[ 1 -ne 2 ]&&echo 1||echo 0 ===>1
逻辑操作符:
	-a and &&与，两端都为真,则真
	-o or || 或，两端有一个为真则真
	! not 非  ,相反则为真
	[] 用 -a  [[]]使用 &&
	and:
		and 1*0=0 假
		and 0*0=0 假
		and 1*1=1 真
		and 0*0=0 假
		两端都为真则真 
	or:
		or 1+1=2 真
		or 1+0=1 真
		or 0+1=1 真
		or 0+0=0 假
		两端都为假则假
	[ -f file1 -a -f file2 ] && echo 1 || echo 0 ===> 1
shell函数:
	把程序多次调用相同的代码定义成一份，然后起个名字，所有的调用都只用这个名字就可以了。
	优势：
		1、减少程序代码量
		2、增加程序可读性
		3、实现程序功能模块化
	语法:
		函数名(){
			指令
		}
		规范写法:
		function 函数名(){
 			指令
		}
	执行:
		不带参数:
			函数名   注意:不能带小括号,函数定义及函数体必须在要执行的函数名的前面定义,shell执行时从上到下按行执行的。
		带参数的函数执行方法:
			函数名 参数1 参数2 
			函数体中位置参数($1 $2 。。。$# $* $? 以及$@)都可以是函数的参数
			父脚本的参数则临时的被函数参数所掩盖或隐藏
			函数完成时，原来的命令行参数会恢复
			在shell函数里面,return命令的工作方式与exit相同，用于跳出函数
			exit会跳出整个脚本
			return 语句会返回一个退出值给调用的程序
case:
	case "字符串变量" in
	  值1) 
	      指令1...
	      ;;
	  值2) 
	      指令2...
	      ;;
	  *) 
	      指令 ...
	      ;;
esac


循环:
	1.while条件句
	while 条件
	    do
	    指令
	done
	2.until (不常用)
	until 条件
	    do
	    指令
	done

for循环:
	for 变量名 in 变量取值范围
	do
	    指令...
	done
	or:

	for ((exp1;exp2;exp3))   ===>类似于c语言
	do
	    指令...
	done



while循环特长是执行守护进程以及希望循环不退出持续执行，用于频率小于1分钟的循环处理，其他while几乎全部可以用for替换
case 语句可以用if语句替换,case一般用于在系统启动脚本传入少量固定规则字符串，其他普通判断用if
for,if更常用

break,continue,exit
break n n表示跳出循环的层数，如果省略n表示跳出整个循环
continue n表示退到第n层继续循环,如果省略n表示跳出本次循环,忽略本次循环的剩余代码，进入循环的下一次循环
exit n 退出当前shell程序，n为返回值,n也可以省略。在下一shell里通过$?收到这个字
return n 用于函数里,作为函数的返回值,用于判断函数执行是否正确





随机数与随机字符串:
1、通过系统内部变量($RANDOM)  
	 echo $RANDOM ===> 15032
	 注：得到的这个随机数是介于 0~32767 之间的一个整数。
	 取8位:
	 echo $RANDOM |md5sum|cut -c 1-8
2、系统内部唯一数据生成随机数(/dev/random,urandom)
	/dev/random设备，存储着系统当前运行的环境的实时数据。它可以看作是系统某个时候，唯一值数据，因此可以用作随机数元数据。我们可以通过文件读取方式，读得里面数据。/dev/urandom这个设备数据与random里面一样。只是，它是非阻塞的随机数发生器，读取操作不会产生阻塞。
	head -1 /dev/urandom
	得到的是乱码==它是通过二进制数据保存实时数据的
	head -200 /dev/urandom | cksum | cut -f1 -d" "
	#由于urandom的数据是非常多，不能直接通过cat读取，这里取前200行，其实整个数据都是变化的，取多少也一样是唯一的。
	#cksum 将读取文件内容，生成唯一的表示整型数据，只有文件内容不变，生成结果就不会变化,与php crc函数，#cut 以” “分割，然后得到分割的第一个字段数据
	head -n 5 /dev/urandom |sed 's/[^a-Z0-9]//g'|strings -n 4  === 生成由a-Z和0-9组成的字符串。 
	head -n 5 /dev/urandom |strings -n 5    strings:在对象文件或二进制文件中查找可打印的字符串。
3、通过时间获得随机
    date +%s%N ===> 1472018661360197800
4、读取linux 的uuid码
    cat /proc/sys/kernel/random/uuid| cksum |cut -f1 -d" "
    参考:http://www.cnblogs.com/chengmo/archive/2010/10/23/1858879.html
5.openssl生成随机字符串:
	openssl passwd -stdin < <(echo)

shell数组:
	相同数据类型的元素按一定顺序排序的集合。
	shell数组的定义与增删改查:
	定义:
		array=(1 2 3)
		array=$(ls)
	数组赋值:
		array[3]=4
		echo ${array[*]} ====> 1 2 3 4 
	数组删除:
		unset array ==>删除整个数组
		unset array[0] ==>删除第一个元素
	数组截取和替换:
		array=(1 2 3 4 5)
		echo ${array[*]:1:3} ==>1 2 3 截取1号到3号元素
		echo ${array[*]:3:2} ==>4 5
	 	array1=(${array[*]/5/6})==>array1 == 1 2 3 4 6
打印数组:
	echo ${#array[@]} ===> 打印数组长度
	echo ${array[@]} ===>所有元素
	echo ${array[i]} ===> 单个元素,i是下标

shell脚本的调试:
	1、直接执行根据报错调试
	2、记得首先用dos2unix处理
	3、sh -x调试整个脚本,显示执行过程
	4、set -x set+x 调试部分脚本
	5、echo输出变量及其相关内容，紧接着exit退出不执行后面程序的方式，一步步跟踪脚本
	6、养成良好的编程习惯

	sh
	-x  将执行的脚本内容及输出显示到屏幕
	-n  不会执行该脚本，仅查询脚本语法是否有问题，并给出错误提示
	-v  在执行脚本时，先将脚本的内容输出到屏幕上然后执行脚本，如果有错误也会给出错误提示	
	set -x  可以缩小sh -x的作用率
	脚本中使用set -x与set +x 则会调试-x与+x之间的内容
