nginx本身是一款静态(html,js,css,jpg等)www软件
最大特点:
1、静态小文件(1M)，支持高并发，占用资源少，3w并发，10个进程，内存150M
淘宝更改的nginx，tengine(http://tengine.taobao.org/)

nginx服务功能
a. www,web服务,邮件服务，邮件代理
b. 负载均衡(反向代理proxy)
c. web cache(web 缓存),squid(cdn主要用squid)

nginx特点：
	1、配置简单，灵活，轻量
	2、高并发
	3、占用资源少
	4、功能种类较多(web,cache,proxy),每一个功能都不是特别强
	5、支持epoll模型
	6、可以对IP限速，限制连接数
www服务特性如下:
	支持基于名字、端口、IP的多虚拟主机站点；
	支持rewrite模块，支持URI重写及正则表达式
	支持基于客户端ip地址和HTTP基本认证的访问控制
	支持http响应速率限制
	支持统一ip地址的并发连接或请求数限制
使用场合:
	1、提供静态服务。并发几万
	2、动态服务，nginx+fastcgi方式运行php,jsp。并发300-500
	3、反向代理，或者称为负载均衡
	4、缓存服务，类似SQUID,VERNISH

安装nginx:
1、安装pcre
	http rewrite 模块需要pcre库
	rpm -qa pcre pcre-devel   检查有没有安装
	yum install pcre pcre-devel
2、openssl
	yum install openssl openssl-devel -y

3、编译安装nginx1.8
useradd nginx -s /sbin/nologin -M
wget https://nginx.org/download/nginx-1.8.1.tar.gz
tar -zxf nginx-1.8.1.tar.gz
cd nginx-1.8.1
./configure --prefix=/application/nginx-1.8.1 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module
make && make install
ln -s /application/nginx-1.8.1 /application/nginx

nginx -V 查看nginx编译目录
nginx -t 检查语法
nginx -s reload 重启nginx
nginx -h 查看帮助

nginx配置:

#user  nobody;
worker_processes  1;            ## 进程有几个

#error_log  logs/error.log;        ## 错误日志 有级别
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;        ## pid,管理可以直接杀pid


events {
    worker_connections  1024;  ##一个worker可以处理多大并发
}


http {       ## http模块
    include       mime.types;     
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;    ##超时

    #gzip  on;

    server {           ##server标签 一个server标签是一个虚拟主机
        listen       80;           ##端口
        server_name  localhost;    ##域名

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {   ### /代表所有请求都到这里找文件，location是根据uri跳转的功能
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {     ## =优先于高于/
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

当配置多个虚拟主机时，输入ip会找第一个。
include 优化nginx
示例
include extra/*.conf;


nginx别名设置:
	在后面 server name  加域名。
	server_name  www.ichenfei.com alias;

配置nginx stutus:
server{
	listen 80;
	server_name status.ichenfei1.com;
	location / {
		stub_status on;
		access_log off;
	}
}

Active connections: 1    ------活动连接接数
server accepts handled requests
 38 38 37       
共处理了38个连接，公创建38次握手,处理37次请求
Reading: 0 Writing: 1 Waiting: 0 
Reading 读取到客户端的Header信息数
Writing 返回给客户端的Header信息数
Waiting 已经处理完正等下一次请求的指令的驻留连接


nginx访问日志详解:
https://nginx.org/en/docs/http/ngx_http_log_module.html
log_format: 用来定义日志的格式(可以定义多种日志格式，取不同名字即可)
access_log: 用来指定日志文件的路径及其使用何种日志格式记录

log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for"';

$remote_addr 记录访问网站的客户端地址
$http_x_forwarded_for $当有代理服务器时，设置web节点客户端地址的配置，此参数生效的前提是服务器上也要进行相关的xx_forwarded_for配置
$remote_user  记录客户端用户名称
$time_local  记录访问用户时区
$request  用户的http请求起始行信息
$status  http状态码
$body_bytes_sents  服务器发送给客户端的响应body字节数
$http_referer   记录此次请求是从哪个链接访问过来的，可以根据referer进行防盗链设置
$http_user_agent   记录客户端访问信息，例如：浏览器，手机客户端等

access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]]; 
access_log off;
默认:
access_log logs/access.log combined;


日志收集:
rsyslog,Awstats,flume,storm,ELK(Elasticsearch+Logstash+Kibana)


rewrite:
语法: rewrite regex replacement [flag];
默认值:none
rewrite是实现url重写的关键指令，根据regex(正则表达式)部分内容重定向replacement部分内容，结尾是一个简单的url rewrite跳转的。
示例
rewrite ^/(.*) http://www.ichenfei.com/$1 premanent;
上述指令中,rewrite是固定关键字，表示开启一条rewrite匹配规则，regex部分^/(.*)是一个整个表达式，匹配成功后跳转到http://www.ichenfei.com/$1 这是取前面regex部分()里的内容,结尾permanent,表示永久301重定向标记即跳转到www.ichenfei.com
flag标记:
	last 本条规则匹配完成后，继续向下匹配新的location URI规则；
	break 本条规则匹配完成即终止。不再匹配后面的任何规则
	redirect 返回302临时重定向，浏览器地址栏会显示跳转后的URL地址
	permanent 返回301永久重定向，浏览器地址会显示跳转后的URL地址

rewrite应用场景:
1、可以调整用户浏览的URL，看起来更规范，合乎开发及产品人员的要求
2、为了让搜索引擎收录网站内容及用户体验更好，企业会将URL伪装成静态地址提供服务
3、网站换新域名后，让旧域名跳转到新的域名商上
4、根据特修变量，目录、客户端进行URL跳转

示例:
1、实现访问blog.ichenfei.com跳转到www.hcnefei.com/blog/index.html
server{
    server_name blog.ichenfei.com;
    location /{
        root  html/blog;
        index  index.html index.htm index.php;
    }	
    rewrite ^(.*) http://www.ichenfei.com/blog/index.html break;
    access_log logs/access_blog.log main;
}

rewrite官方文档:
http://nginx.org/en/docs/http/ngx_http_rewrite_module.html


负载均衡:
L4:tcp负载均衡 lvs
L4-L7 Haproxy
L7(http) nginx

nginx是国内中小企业集群比较流行的负载均衡软件(严格来说叫反向代理)。
反向代理:代替用户请求内部服务器的代理。

nginx负载均衡器需要的模块:
1. upstream 模块----定义有哪些节点，调度算法是什么
http://nginx.org/en/docs/http/ngx_http_upstream_module.html
示例:

upstream backend {
    server backend1.example.com       weight=5;
    server backend2.example.com:8080;
    server unix:/tmp/backend3;

    server backup1.example.com:8080   backup;
    server backup2.example.com:8080   backup;
} 
---------相当于变量定义

server {
    location / {
        proxy_pass http://backend;
    }
}
---------使用

2. http_proxy 模块 -------此模块负责请求请求的转发。例如proxy_pass 定义好的upstream名字.
http://nginx.org/en/docs/http/ngx_http_proxy_module.html